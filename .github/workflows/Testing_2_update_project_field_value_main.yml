name: Update GitHub Project Field

on:
  issues:
    types: [opened, edited, labeled]

permissions:
  contents: write
  issues: write

jobs:
  update-project-field:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get Issue ID
        id: get_issue_id
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "Fetching Issue ID for issue #${{ github.event.issue.number }}..."
          
          ISSUE_ID=$(gh api graphql -f query='
          {
            repository(owner: "${{ github.repository_owner }}", name: "${{ github.event.repository.name }}") {
              issue(number: ${{ github.event.issue.number }}) {
                id
              }
            }
          }' --jq '.data.repository.issue.id')

          echo "Issue ID: $ISSUE_ID"
          echo "ISSUE_ID=$ISSUE_ID" >> "$GITHUB_ENV"

      - name: Check if Issue Exists in Project
        id: check_project_item
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          PROJECT_ID="PVT_kwHOBffn_c4Ay8TW"
          
          echo "Checking if the issue is already in the project..."
          PROJECT_ITEM_ID=$(gh api graphql -f query='
          {
            node(id: "'$PROJECT_ID'") {
              ... on ProjectV2 {
                items(first: 100) {
                  nodes {
                    id
                    content {
                      ... on Issue {
                        id
                      }
                    }
                  }
                }
              }
            }
          }' --jq '.data.node.items.nodes[] | select(.content.id=="'$ISSUE_ID'") | .id')

          if [ -z "$PROJECT_ITEM_ID" ]; then
            echo "Issue not found in project."
            echo "PROJECT_ITEM_ID=" >> "$GITHUB_ENV"
          else
            echo "Issue is already in the project. ProjectV2Item ID: $PROJECT_ITEM_ID"
            echo "PROJECT_ITEM_ID=$PROJECT_ITEM_ID" >> "$GITHUB_ENV"
          fi

      - name: Add Issue to Project (if not added)
        if: env.PROJECT_ITEM_ID == ''
        id: add_to_project
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          PROJECT_ID="PVT_kwHOBffn_c4Ay8TW"

          echo "Adding issue to project..."
          PROJECT_ITEM_ID=$(gh api graphql -f query='
          mutation {
            addProjectV2ItemById(input: {projectId: "'$PROJECT_ID'", contentId: "'$ISSUE_ID'"}) {
              item {
                id
              }
            }
          }' --jq '.data.addProjectV2ItemById.item.id')

          echo "Issue added to project with ProjectV2Item ID: $PROJECT_ITEM_ID"
          echo "PROJECT_ITEM_ID=$PROJECT_ITEM_ID" >> "$GITHUB_ENV"

      - name: Update Project Field
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          PROJECT_ID="PVT_kwHOBffn_c4Ay8TW"
          FIELD_ID="PVTF_lAHOBffn_c4Ay8TWzgo0NbQ"
          FIELD_VALUE=10  # ✅ Fix: Pass a number, NOT a string

          if [ -z "$PROJECT_ITEM_ID" ]; then
            echo "❌ ERROR: No ProjectV2Item ID found. Cannot update the field."
            exit 1
          fi

          echo "Updating project field for ProjectV2Item ID: $PROJECT_ITEM_ID..."

          gh api graphql -H "Authorization: Bearer $GH_TOKEN" -f query='
          mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: Float!) {
            updateProjectV2ItemFieldValue(
              input: {
                projectId: $projectId
                itemId: $itemId
                fieldId: $fieldId
                value: { number: $value }
              }
            ) {
              projectV2Item {
                id
              }
            }
          }' -F projectId="$PROJECT_ID" -F itemId="$PROJECT_ITEM_ID" -F fieldId="$FIELD_ID" -F value="$FIELD_VALUE"

          echo "✅ Project field updated successfully!"
